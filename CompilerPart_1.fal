/*************************************
* Building a Compiler 
* translate VM into assembly
**************************************/

/*************** Files **************/
output_path = "C:\\Users\\elhan\\Documents\\nand2tetris\\projects\\07\\MemoryAccess\\StaticTest\\StaticTest.asm"
result = OutputStream(output_path)

/********** variables ***********/
/// number of true label for example: @TRUE1, @TRUE2 ...
true_label = 0 
/// as appear above but with false label
false_label = 0
dict = [ "local" => "LCL", "argument" => "ARG", "this" => "THIS",
          "that" => "THAT" ]

input_path = "C:\\Users\\elhan\\Documents\\nand2tetris\\projects\\07\\MemoryAccess\\StaticTest\\StaticTest.vm"
/********** operation functions **************/

/**
*  if I have the string: "buy milk 8 9.8" called exam
*  for exam[0:] returns 5
*/
function next_space_index (str, serial_space_number)
    i = 0
	num = serial_space_number
	if str == ""
		return 0;
	end
	while num != 0 
	    
		try
			if str[i+1] == ""
			end
		catch
			i = i + 2
			break
		end
		if str[i] == " "
			num--
		end
		++i
	end
    return i
end

function add ()
    result.writeText("@SP" 
	                     + "\n" + "A=M-1" 
						 + "\n" + "D=M" 
						 + "\n" + "A=A-1"
						 + "\n" + "M=D+M" 
						 + "\n" + "@SP" 
						 + "\n" + "M=M-1" + "\n")
end

function sub ()
    result.writeText("@SP" 
	                   + "\n" + "A=M-1" 
					   + "\n" + "D=M" 
					   + "\n" + "A=A-1"
					   + "\n" + "M=M-D" 
					   + "\n" + "@SP" 
					   + "\n" + "M=M-1" + "\n")
end	

function neg ()
    result.writeText("@SP" 
	                   + "\n" + "A=M-1" 
                       + "\n" + "M=-M" + "\n")
end	

function equ ()
    result.writeText("@SP" 
						+ "\n" + "A=M-1" 
						+ "\n" + "D=M"
						+ "\n" + "A=A-1" 
						+ "\n" + "D=M-D"
                        + "\n" + "@TRUE" + true_label
                        + "\n" + "D;JGT" 
						+ "\n" + "D=0"
                        + "\n" + "@FALSE" + false_label 
                        + "\n" + "0;JMP" 
						+ "\n" +  "(TRUE" + true_label + ")"
                        + "\n" + "D=-1"
                        + "\n" + "(FALSE" + false_label + ")"
                        + "\n" + "@SP"
                        + "\n" + "M=M-1"
                        + "\n" + "@SP"
                        + "\n" + "M=M-1"
                        + "\n" + "@SP"
                        + "\n" + "A=M-1"
                        + "\n" + "M=D" + "\n")
	++true_label
    ++false_label
end

function grt ()
    result.writeText("@SP" + "\n" + "A=M-1"
	                       + "\n" + "D=M"
						   + "\n" + "A=A-1"
						   + "\n" + "D=M-D"
						   + "\n" + "@True" + true_label
						   + "\n" + "D;JGT" 
						   + "\n" + "D=0"
						   + "\n" + "@FALSE" + false_label
						   + "\n" + "0;JMP"
						   + "\n" + "(TRUE" + true_label + ")"
						   + "\n" + "D=-1"
						   + "\n" + "(FALSE" + false_label + ")"
						   + "\n" + "@SP"
						   + "\n" + "M=M-1"
						   + "\n" + "@SP"
						   + "\n" + "A=M-1"
						   + "\n" + "M=D" + "\n")
	++true_label
    ++false_label
end	

function llt ()
    result.writeText("@SP" + "\n" + "A=M-1"
	                       + "\n" + "D=M"
						   + "\n" + "A=A-1"
						   + "\n" + "D=M-D"
						   + "\n" + "@TRUE" + true_label
						   + "\n" + "D;JLT"
						   + "\n" + "D=0"
						   + "\n" + "@FALSE" + false_label
						   + "\n" + "0;JMP"
						   + "\n" + "(TRUE" + true_label + ")"
						   + "\n" + "D=-1"
						   + "\n" + "(FALSE" + false_label + ")"
						   + "\n" + "@SP" 
						   + "\n" + "M=M-1"
						   + "\n" + "@SP"
						   + "\n" + "A=M-1"
						   + "\n" + "M=D" + "\n")
	++true_label
    ++false_label	
end	
                              						   
function andf ()
    result.writeText("@SP" + "\n" + "A=M-1"
	                       + "\n" + "D=M"
						   + "\n" + "A=A-1"
						   + "\n" + "M=D&M"
						   + "\n" + "@SP"
						   + "\n" + "M=M-1" + "\n")
end		

function orf ()
    result.writeText("@SP" + "\n" + "A=M-1"
                           + "\n" + "M=!M" + "\n")
end

function push (key, value)
    switch key
	    case "local", "argument", "this", "that"
		    result.writeText("@" + dict[key] 
			                     + "\n" + "D=M"
								 + "\n" + "@" + value
								 + "\n" + "A=D+A"
								 + "\n" + "D=M" + "\n")
		case "temp"
            result.writeText("@5" + "\n" + "D=A" 
			                      + "\n" + "@" + value
                                  + "\n" + "A=D+A"
                                  + "\n" + "D=M" + "\n")								  
		case "static"
            result.writeText("@" + "StaticTest" + "." + value 
			                     + "\n" + "D=M" + "\n")
        
		case "pointer"
		    switch (value)
			    case "0"
				    result.writeText("@THIS" + "\n")
				case "1"
                    result.writeText("@THAT" + "\n")     
			end
			result.writeText("D=M" + "\n")
		case "constant"
            result.writeText("@" + value 
			                     + "\n" + "D=A" + "\n")
							 
            			
	end
	result.writeText("@SP" + "\n" + "A=M"
	                       + "\n" + "M=D"
						   + "\n" + "@SP"
						   + "\n" + "M=M+1" + "\n")
end	

function pop (key, value)
    switch key
	    case "local", "argument", "this", "that"
		    result.writeText("@" + dict[key] 
			                     + "\n" + "D=M"
								 + "\n" + "@" + value
								 + "\n" + "D=D+A"
								 + "\n" + "@R13"
								 + "\n" + "M=D"
								 + "\n" + "@SP"
								 + "\n" + "A=M-1"
								 + "\n" + "D=M"
								 + "\n" + "@R13"
								 + "\n" + "A=M"
								 + "\n" + "M=D"
								 + "\n" + "@SP"
								 + "\n" + "M=M-1" + "\n")
		case "temp"
		    newValue = 5 + int (value)
            result.writeText("@SP" + "\n" + "A=M-1"
                                   + "\n" + "D=M"
                                   + "\n" + "@" + newValue
                                   + "\n" + "M=D"
                                   + "\n" + "@SP"
                                   + "\n" + "M=M-1" + "\n") 
        case "static" 
            result.writeText("@SP" + "\n" + "A=M-1"
                                   + "\n" + "D=M"
                                   + "\n" + "@" + "StaticTest" + "." + value 
								   + "\n" + "M=D" 
								   + "\n" + "@SP"
								   + "\n" + "M=M-1" + "\n")
        case "pointer"
            result.writeText("@SP" + "\n" + "A=M-1"
                                   + "\n" + "D=M" + "\n")
            switch value
			    case 0
				    result.writeText("@THIS" + "\n")
				case 1
                    result.writeText("@THAT" + "\n")			
            end	
            result.writeText("M=D" + "\n" + "@SP"
                                   + "\n" + "M=M-1" + "\n")			
	end							 
end 					   

f = InputStream(input_path)
for line in f.grabLine  
    op = line[0:next_space_index(line, 1)-1]
	> op
    switch op
        case "add"
			> "addp"
		    add()
		case "sub"
		> "subp"
            sub()
		case "neg"
            neg()
		case "eq"
            equ()
        case "gt"	
            grt()
        case "lt"
            llt()
        case "and"
            andf()
        case "or"
            orf()
        case "push"
		> "pushp"
            data1 = line[next_space_index(line, 1):next_space_index(line, 2) - 1]		
			data2 = line[next_space_index(line, 2): next_space_index(line, 3) - 1]
			> data1 + " " + data2
            push(data1, data2)
		case "popp"	
		    data1 = line[next_space_index(line, 1) : next_space_index(line, 2) - 1]		
			data2 = line[next_space_index(line, 2) : next_space_index(line, 3) - 1]
			> data1 + " " + data2
            pop(data1, data2)
	end	
end						  